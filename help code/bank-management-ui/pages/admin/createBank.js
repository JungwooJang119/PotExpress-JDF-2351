import Head from "next/head";
import React, { useState } from "react";
import Image from "next/image";
import styles from "../../styles/Home.module.css";
import { url } from "../../lib/env";
import Link from "next/link";
import {
  Grid,
  Paper,
  TextField,
  Button,
  Typography,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
} from "@mui/material";

export async function getServerSideProps() {
  const corpIDs = await fetch(url + `/api/getCorpIDs`);
  const corpIDsJSON = await corpIDs.json();
  const employeeIDs = await fetch(url + `/api/getPossibleEmployeeIDs`);
  const employeeIDsJSON = await employeeIDs.json();
  const managerIDs = await fetch(url + `/api/getPossibleManagerIDs`);
  const managerIDsJSON = await managerIDs.json();

  let managerInit = "";
  if (managerIDsJSON.length > 0) {
    managerInit = managerIDsJSON[0]["perID"];
  }
  let corpIDInit = corpIDsJSON[0]["corpID"];
  let employeeInit = employeeIDsJSON[0]["perID"];

  // Pass data to the page via props
  return {
    props: {
      corpIDsJSON,
      employeeIDsJSON,
      managerIDsJSON,
      managerInit,
      employeeInit,
      corpIDInit,
    },
  };
}

export default function createBank(props) {
  const [bankID, setBankID] = useState("");
  const [name, setName] = useState("");
  const [street, setStreet] = useState("");
  const [city, setCity] = useState("");
  const [state, setState] = useState("");
  const [zip, setZip] = useState("");
  const [resAssets, setResAssets] = useState(0);
  const [corpID, setCorpID] = useState(props.corpIDInit);
  const [employee, setEmployee] = useState(props.employeeInit);
  const [manager, setManager] = useState(props.managerInit);

  const handleCreate = async () => {
    if (resAssets < 0) {
      alert("Res Assets Cannot be Negative");
      return;
    }
    if (zip.length !== 5) {
      alert("Zip Code needs 5 digits");
      return;
    }
    const rawResponse = await fetch(url + "/api/createBank", {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        bankID: bankID,
        name: name,
        street: street,
        city: city,
        state: state,
        zip: zip,
        resAssets: resAssets,
        corpID: corpID,
        employee: employee,
        manager: manager,
      }),
    });
    const response = await rawResponse.json();
    console.log(rawResponse);
    if (rawResponse.status !== 200) {
      alert(response.sqlMessage);
    } else if (rawResponse.status === 200) {
      alert("Success");
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Bank Management UI</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Grid container spacing={1}>
        <Grid item xs={12}>
          <h1 className={styles.title}>Create Bank</h1>
        </Grid>

        <Grid item xs={2} />
        <Grid item xs={4}>
          <TextField
            required
            label="Bank ID"
            fullWidth
            value={bankID}
            onChange={(e) => setBankID(e.target.value)}
          />
        </Grid>
        <Grid item xs={4}>
          <TextField
            label="Name"
            fullWidth
            value={name}
            onChange={(e) => setName(e.target.value)}
          />
        </Grid>
        <Grid item xs={2} />

        <Grid item xs={2} />
        <Grid item xs={8}>
          <h3>Address Info</h3>
        </Grid>
        <Grid item xs={2} />

        <Grid item xs={2} />
        <Grid item xs={4}>
          <TextField
            label="Street"
            fullWidth
            value={street}
            onChange={(e) => setStreet(e.target.value)}
          />
        </Grid>
        <Grid item xs={4}>
          <TextField
            label="City"
            fullWidth
            value={city}
            onChange={(e) => setCity(e.target.value)}
          />
        </Grid>
        <Grid item xs={2} />

        <Grid item xs={2} />
        <Grid item xs={4}>
          <TextField
            label="State Abbr."
            fullWidth
            value={state}
            onChange={(e) => setState(e.target.value)}
          />
        </Grid>
        <Grid item xs={4}>
          <TextField
            label="Zip Code"
            fullWidth
            value={zip}
            onChange={(e) => setZip(e.target.value)}
          />
        </Grid>
        <Grid item xs={2} />

        <Grid item xs={2} />
        <Grid item xs={8}>
          <h3>Operation Info</h3>
        </Grid>
        <Grid item xs={2} />

        <Grid item xs={2} />
        <Grid item xs={4}>
          <TextField
            type="number"
            label="Reserved Assets"
            fullWidth
            value={resAssets}
            onChange={(e) => setResAssets(e.target.value)}
          />
        </Grid>
        <Grid item xs={4}>
          <FormControl fullWidth>
            <InputLabel>Corporation ID</InputLabel>
            <Select
              label="Corporation ID"
              value={corpID}
              onChange={(e) => setCorpID(e.target.value)}
            >
              {props.corpIDsJSON.map((obj, i) => {
                let corpID = obj["corpID"];
                return (
                  <MenuItem key={i} value={corpID}>
                    {corpID}
                  </MenuItem>
                );
              })}
            </Select>
          </FormControl>
        </Grid>
        <Grid item xs={2} />

        <Grid item xs={2} />
        <Grid item xs={4}>
          <FormControl fullWidth>
            <InputLabel>Employee</InputLabel>
            <Select
              label="Employee"
              value={employee}
              onChange={(e) => setEmployee(e.target.value)}
            >
              {props.employeeIDsJSON.map((obj, i) => {
                let perID = obj["perID"];
                return (
                  <MenuItem key={i} value={perID}>
                    {perID}
                  </MenuItem>
                );
              })}
            </Select>
          </FormControl>
        </Grid>

        <Grid item xs={4}>
          <FormControl fullWidth>
            <InputLabel>Manager</InputLabel>
            <Select
              label="Manager"
              value={manager}
              onChange={(e) => setManager(e.target.value)}
            >
              {props.managerIDsJSON.map((obj, i) => {
                let manager = obj["perID"];
                return (
                  <MenuItem key={i} value={manager}>
                    {manager}
                  </MenuItem>
                );
              })}
            </Select>
          </FormControl>
        </Grid>
        <Grid item xs={2} />

        <Grid item xs={2} />

        <Grid item xs={4}>
          <Link href="/admin/adminMenu">
            <Button variant="contained" color="error" fullWidth>
              Cancel
            </Button>
          </Link>
        </Grid>
        <Grid item xs={4}>
          <Button variant="contained" fullWidth onClick={handleCreate}>
            Create
          </Button>
        </Grid>
        <Grid item xs={2} />
      </Grid>
    </div>
  );
}
